name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Decode and save keystore
        run: |
          echo "$SIGNING_KEY" | base64 --decode > android/app/my-release-key.jks
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}

      - name: Set up signing properties
        run: |
          # Debido a que ejecutamos gradlew dentro de la carpeta "android",
          # la ruta al keystore debe ser relativa a esa carpeta.
          echo "KEYSTORE_FILE=app/my-release-key.jks" >> gradle.properties
          echo "KEYSTORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}" >> gradle.properties
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> gradle.properties
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> gradle.properties

      - name: Find gradlew
        id: find-gradlew
        run: |
          echo "Searching for gradlew..."
          if [ -f "gradlew" ]; then
            echo "Found in root directory"
            echo "gradlew_path=." >> $GITHUB_OUTPUT
          elif [ -f "android/gradlew" ]; then
            echo "Found in android directory"
            echo "gradlew_path=android" >> $GITHUB_OUTPUT
          else
            echo "Searching in subdirectories..."
            FILE=$(find . -name "gradlew" -type f | head -n 1)
            if [ -n "$FILE" ]; then
              GRADLEW_PATH=$(dirname "$FILE")
              echo "Found in $GRADLEW_PATH"
              echo "gradlew_path=$GRADLEW_PATH" >> $GITHUB_OUTPUT
            else
              echo "gradlew not found. Creating one in the android directory..."
              mkdir -p android
              cd android
              echo "Initializing gradle wrapper..."
              gradle wrapper
              cd ..
              echo "gradlew_path=android" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ${{ steps.find-gradlew.outputs.gradlew_path }}/gradlew

      - name: Build with Gradle
        run: |
          cd ${{ steps.find-gradlew.outputs.gradlew_path }}
          ./gradlew assembleRelease -PKEYSTORE_FILE=app/my-release-key.jks -PKEYSTORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

      - name: Find APK
        id: find-apk
        run: |
          APK_PATH=$(find . -path "*/build/outputs/apk/release/*.apk" | head -n 1)
          if [ -n "$APK_PATH" ]; then
            echo "Found APK at $APK_PATH"
            APK_DIR=$(dirname "$APK_PATH")
            echo "apk_dir=$APK_DIR" >> $GITHUB_OUTPUT
          else
            echo "No APK found"
            exit 1
          fi

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: ${{ steps.find-apk.outputs.apk_dir }}
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: TelefoniaPersonal
          path: ${{ steps.sign_app.outputs.signedReleaseFile }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.sign_app.outputs.signedReleaseFile }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
